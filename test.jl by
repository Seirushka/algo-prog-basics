# task 1
function max_subsum(iter)

    max_sum = cur_sum = iter_0 = zero(eltype(array))

    for num in iter
        cur_sum += num
        (cur_sum < iter_0) && (cur_sum = iter_0)
        (cur_sum > max_sum) && (max_sum = cur_sum)
    end

    return max_sum
end

#task 2
function average_mean(iter)
    mean = sum_line = sum_square = N = zero(eltype(iter))

    for num in iter
        sum_line += num; sum_square += num^2
        N += one(eltype(iter))
    end
    
    mean = (sum_square - sum_line^2 / N) / N

    return sum_line / N, sqrt(mean)
end


function multi_average_mean(iter) # iter многомерный
    mean = sum_line = sum_square = N = zero(eltype(iter))

    for num in iter
        @. sum_line += num
        @. sum_square += num^2
        N += one(eltype(iter))
    end
    
    @. mean = (sum_square - sum_line^2 / N) / N

    return sum_line / N, sqrt(mean)
end

# task 3 - 4
function gorner(iter, arg)
    T = promote_type(eltype(iter), typeof(arg))
    polynomial::T = iter[begin]
    derivative = zero(T)

    for coef in Iterators.drop(iter, 1)
        derivative = derivative * arg + polynomial
        polynomial = polynomial * arg + coef
    end

    return polynomial, derivative
end

#task 5
function my_gcd(obj10::T, obj20::T) where T
    obj1, obj2 = obj10, obj20

    while !iszero(obj2)
        obj1, obj2 = obj2, mod(obj1, obj2)
    end

    return obj1
end


function my_gcdx(a0::T, b0::T) where T
    a, b = a0, b0
    ua, va = one(T), zero(T)
    ub, vb = zero(T), one(T)
    
    while !iszero(b)
        prev_a = a
        
        k, r = divrem(prev_a, b) # a = k * b + r, r = a mod b
        a, b = b, r
        
        prev_ua, prev_va = ua, va

        ua, va = ub, vb
        ub = prev_ua - k * ub # ub = ua mod ub
        vb = prev_va - k * vb 
    end

    return a, ua, va
end


function my_gcdx_1(a0::T, b0::T) where T
    a, b = a0, b0
    
    if b == zero(T)
        return a, one(T), zero(T)
    end

    gcd, x1, y1 = my_gcdx_1(b, mod(a, b))
    x, y = y1, x1 - y1 * div(a, b)

    return gcd, x, y
end

# task 6
struct Residue{T, M}
    val::T
    Residue{T, M}(val::T) where {T, M} = new{T, M}(mod(val, M))
end


Residue{T, M}(val) where {T, M} = Residue{T, M}(T(val))

Base.zero(::Type{Residue{T, M}}) where {T, M} = Residue{T, M}(zero(T))
Base.zero(Zn::Residue{T, M}) where {T, M} = zero(Residue{T, M})

Base.one(::Type{Residue{T, M}}) where {T, M} = Residue{T, M}(one(T))
Base.one(Zn::Residue{T, M}) where {T, M} = one(Residue{T, M})

# task 7